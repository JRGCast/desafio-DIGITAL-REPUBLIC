{"version":3,"sources":["components/WallsInputs.js","pages/LandingPage.js","Routes/Routes.js","App.js","reportWebVitals.js","index.js"],"names":["WallsInputs","quantityOfWalls","amountOfWalls","Array","fill","useState","theInputs","map","_wallNumber","index","handleCheck","e","console","log","target","checked","htmlFor","id","type","min","max","step","required","onChange","LandingPage","giantString","split","item","Routes","exact","path","component","App","className","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","document","getElementById"],"mappings":"oOA6CeA,EA3CK,SAAC,GAAyB,IAAvBC,EAAsB,EAAtBA,gBACfC,EAAgBC,MAAMF,GAAiBG,KAAK,MAGlD,EAAsCC,oBAAS,GAA/C,mBACMC,GADN,UACkBJ,EAAcK,KAAI,SAACC,EAAaC,GAChD,IAAMC,EAAc,SAACC,GAAD,OAAOC,QAAQC,IAAIF,EAAEG,OAAOC,UAChD,OACE,gCACE,wBAAOC,QAAO,sBAAkBP,GAAhC,2BAA0DA,EACxD,uBAAOQ,GAAE,sBAAkBR,GACzBS,KAAK,SACLC,IAVc,EAWdC,IAVc,GAWdC,KAAO,GACPC,UAAQ,OAEZ,wBAAON,QAAO,sBAAkBP,GAAhC,gCAA+DA,EAC7D,uBAAOQ,GAAE,sBAAkBR,GACzBS,KAAK,SACLC,IAlBc,EAmBdC,IAlBc,GAmBdC,KAAO,IACPC,UAAQ,OAEZ,wBAAON,QAAO,eAAWP,EAAX,eAAd,0BACE,uBAAOQ,GAAE,eAAWR,EAAX,eAAgCS,KAAK,WAAWK,SAAWb,OAEtE,wBAAOM,QAAO,eAAWP,EAAX,aAAd,yBACE,uBAAOQ,GAAE,eAAWR,EAAX,aAA8BS,KAAK,WAAWK,SAAWb,OAElEE,QAAQC,IAAIX,UAIpB,OACE,8BACII,KChBOkB,EArBK,WAClB,IAAMC,EAAc,2oBAWVC,MAAM,KAAKnB,KAAI,SAACoB,EAAMlB,GAAP,OAAiB,4BAAmBkB,GAAVlB,MACnD,OACE,gCACE,sDACA,cAAC,EAAD,CAAaR,gBAAkB,IAC/B,6BAAMwB,QCRGG,EARA,WACb,OACE,cAAC,IAAD,UACE,cAAC,IAAD,CAAOC,OAAK,EAACC,KAAK,4BAA4BC,UAAYP,OCQjDQ,MAXf,WACE,OACE,sBAAKC,UAAU,MAAf,UACE,oJACA,iOACA,qJACA,cAAC,EAAD,QCGSC,G,MAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,QCAdQ,IAASC,OACP,cAAC,IAAD,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.e9714874.chunk.js","sourcesContent":["import { useState } from \"react\";\n\nconst WallsInputs = ({ quantityOfWalls }) => {\n  const amountOfWalls = Array(quantityOfWalls).fill(null);\n  const minWallMeasures = 1;\n  const maxWallMeasures = 15;\n  const [doorChecked, setDoorChecked] = useState(false);\n  const theInputs = amountOfWalls.map((_wallNumber, index) => {\n    const handleCheck = (e) => console.log(e.target.checked);\n    return (\n      <div>\n        <label htmlFor={ `wall-height-${index}` }>Altura Parede { index }\n          <input id={ `wall-height-${index}` }\n            type='number'\n            min={ minWallMeasures }\n            max={ maxWallMeasures }\n            step={ 0.1 }\n            required />\n        </label>\n        <label htmlFor={ `wall-length-${index}` }>Comprimento Parede { index }\n          <input id={ `wall-length-${index}` }\n            type='number'\n            min={ minWallMeasures }\n            max={ maxWallMeasures }\n            step={ 0.01 }\n            required />\n        </label>\n        <label htmlFor={ `wall-${index}-has-window` }>Possui janela\n          <input id={ `wall-${index}-has-window` } type='checkbox' onChange={ handleCheck } />\n        </label>\n        <label htmlFor={ `wall-${index}-has-door` }>Possui porta\n          <input id={ `wall-${index}-has-door` } type='checkbox' onChange={ handleCheck } />\n        </label>\n        { console.log(amountOfWalls) }\n      </div>\n    );\n  });\n  return (\n    <div>\n      { theInputs }\n      {/* { document.getElementById(`wall-${2}-has-door`).checked ? <h1>Ou</h1> : '' }\n      { document.getElementById(`wall-${3}-has-window`).checked ? <h1>Ou</h1> : '' } */}\n    </div>);\n};\n\nexport default WallsInputs;","import WallsInputs from \"../components/WallsInputs\";\n\nconst LandingPage = () => {\n  const giantString = `1. Nenhuma parede pode ter menos de 1 metro nem mais de 15 metros, mas podem possuir alturas e larguras diferentes;\n  2. O total de área das portas e janelas deve ser no máximo 50 % da área de parede;\n  3. A altura de paredes com porta deve ser, no mínimo, 30 centímetros maior que a altura da porta;\n  4. Cada janela possui as medidas: 2, 00 x 1, 20 mtos;\n  5. Cada porta possui as medidas: 0, 80 x 1, 90;\n  6. Cada litro de tinta é capaz de pintar 5 metros quadrados;\n  7. Não considerar teto nem piso.;\n  8. As variações de tamanho das latas de tinta são: ;\n  - 0, 5 L;\n  - 2, 5 L;\n  - 3, 6 L;\n  - 18 L; `.split(';').map((item, index) => <p key={ index }>{ item }</p>);\n  return (\n    <div>\n      <h1>Regras de negócio</h1>\n      <WallsInputs quantityOfWalls={ 4 } />\n      <ul>{ giantString }</ul>\n    </div>);\n};\n\nexport default LandingPage;","import { Route, Switch } from 'react-router-dom';\nimport LandingPage from '../pages/LandingPage';\n\nconst Routes = () => {\n  return (\n    <Switch>\n      <Route exact path='/desafio-DIGITAL-REPUBLIC' component={ LandingPage }></Route>\n    </Switch>\n  );\n};\n\nexport default Routes;","import './App.css';\nimport Routes from './Routes/Routes';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <p>Uma aplicação web que ajude o usuário a calcular a quantidade de tinta necessária para pintar uma sala.</p>\n      <p>Essa aplicação deve considerar que a sala é composta de 4 paredes e deve permitir que o usuário escolha qual a medida de cada parede e quantas janelas e portas possuem cada parede.</p>\n      <p>Com base na quantidade necessária o sistema deve apontar tamanhos de lata de tinta que o usuário deve comprar.</p>\n      <Routes />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { BrowserRouter } from 'react-router-dom';\nimport App from './App';\nimport './index.css';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <BrowserRouter>\n    <App />\n  </BrowserRouter>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}